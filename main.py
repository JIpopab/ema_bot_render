import os
import pandas as pd
import requests
from flask import Flask
from apscheduler.schedulers.background import BackgroundScheduler

TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")

app = Flask(__name__)
scheduler = BackgroundScheduler()
last_cross = None  # –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞

def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message
    }
    try:
        r = requests.post(url, json=payload)
        if r.status_code != 200:
            print("‚ùå –û—à–∏–±–∫–∞ Telegram:", r.text)
    except Exception as e:
        print(f"‚ùå Telegram Error: {e}")

def fetch_and_check_ema():
    global last_cross

    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Bybit...")
    url = "https://api.bybit.com/v5/market/kline"
    params = {
        "category": "linear",
        "symbol": "BTCUSDT",
        "interval": "5",
        "limit": 100
    }
    headers = {
        "User-Agent": "EMA-Bot/1.0"
    }

    try:
        response = requests.get(url, params=params, headers=headers)
        response.raise_for_status()

        if not response.text:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Bybit")
            return

        data = response.json()
        if "result" not in data or "list" not in data["result"]:
            print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", data)
            return

        candles = data["result"]["list"]
        closes = [float(c[4]) for c in candles][::-1]

        price = closes[-1]
        ema10 = pd.Series(closes).ewm(span=10).mean().iloc[-1]
        ema21 = pd.Series(closes).ewm(span=21).mean().iloc[-1]

        print(f"üìä –¶–µ–Ω–∞: {price:.2f} | EMA10: {ema10:.2f} | EMA21: {ema21:.2f}")

        if ema10 > ema21 and last_cross != "up":
            send_telegram_message(f"üü¢ EMA10 ({ema10:.2f}) –ø–µ—Ä–µ—Å–µ–∫ EMA21 ({ema21:.2f}) –≤–≤–µ—Ä—Ö\n–¶–µ–Ω–∞: {price:.2f}")
            last_cross = "up"
        elif ema10 < ema21 and last_cross != "down":
            send_telegram_message(f"üî¥ EMA10 ({ema10:.2f}) –ø–µ—Ä–µ—Å–µ–∫ EMA21 ({ema21:.2f}) –≤–Ω–∏–∑\n–¶–µ–Ω–∞: {price:.2f}")
            last_cross = "down"
        else:
            print("‚è∏Ô∏è –ù–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Request error: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@app.route("/")
def index():
    return "‚úÖ EMA Bot —Ä–∞–±–æ—Ç–∞–µ—Ç"

# —Å—Ç–∞—Ä—Ç—É–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
scheduler.add_job(fetch_and_check_ema, "interval", minutes=1)
scheduler.start()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ EMA –±–æ—Ç–∞ —Å Bybit...")
    fetch_and_check_ema()  # –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –≤—Ä—É—á–Ω—É—é
    app.run(host="0.0.0.0", port=5000)
